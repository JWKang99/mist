{{#translator}}
<script>
var {{svg}} = d3.select("#{{graph}}").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

{{svg}}.call(tip);

d3.csv("{{{file}}}", function(error, data) {
  var iterationNames = d3.keys(data[0]).filter(function(key) { return key !== "Iterations"; });

var phase=0;
  data.forEach(function(d) {
    d.iterations = iterationNames.map(function(name) {
      if (typeof d.Frontier === 'undefined'){
        if(d[name] == 1.1) phase=0.1;
        if(d[name] == 2.2) phase=0.2;
        return {name: name, value: +(phase+parseInt(d[name]))};
      }
      return {name: name, value: +d[name]};
    });
  });

  {{svg}}.append("text")
        .attr("x", (width / 2))
        .attr("y", 0)
        .attr("text-anchor", "middle")
        .style("font-size", "16px")
        .style("text-decoration", "underline")
        .text("{{file}}");
  var counter=0;
  x0.domain(data.map(function(d) { counter+=1; return d.Iterations; }));
  x1.domain(iterationNames).rangeRoundBands([0, x0.rangeBand()]);
  y.domain([0, d3.max(data, function(d) { return d3.max(d.iterations, function(d) { return Math.floor(d.value); }); })]);
  xAxis.tickValues(x0.domain().filter(function(d, i) { return !(i % Math.floor(counter/30)); }));
  {{svg}}.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  {{svg}}.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("NÂº Elems");

  var state = {{svg}}.selectAll(".state")
      .data(data)
    .enter().append("g")
      .attr("class", "g")
      .attr("transform", function(d) { return "translate(" + x0(d.Iterations) + ",0)"; });

  state.selectAll("rect")
      .data(function(d) { return d.iterations; })
    .enter().append("rect")
      .attr("width", x1.rangeBand())
      .attr("x", function(d) { return x1(d.name); })
      .attr("y", function(d) { return y(d.value); })
      .on('mouseover', tip.show)
      .on('mouseout', tip.hide)
      .attr("height", function(d) { return height - y(d.value); })
      .style("fill", function(d) {
        if (d.value == 1.1) {
          change_color = 5;
        } else if (d.value == 2.2) {
          change_color = 1;
        }
        return color(d.name + change_color); });
});
</script>
{{/translator}}